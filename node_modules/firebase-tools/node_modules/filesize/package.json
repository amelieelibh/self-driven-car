{
  "name": "filesize",
  "description": "JavaScript library to generate a human readable String describing the file size",
  "version": "3.6.0",
  "homepage": "https://filesizejs.com",
  "author": {
    "name": "Jason Mulligan",
    "email": "jason.mulligan@avoidwork.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/avoidwork/filesize.js.git"
  },
  "bugs": {
    "url": "https://github.com/avoidwork/filesize.js/issues"
  },
  "license": "BSD-3-Clause",
  "main": "lib/filesize",
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-minify": "^0.3.0",
    "grunt": "^1.0.1",
    "grunt-babel": "^7.0.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-concat": "^1.0.1",
    "grunt-contrib-nodeunit": "^1.0.0",
    "grunt-contrib-uglify": "^3.3.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-eslint": "^20.1.0"
  },
  "keywords": [
    "file",
    "filesize",
    "size",
    "readable",
    "file system",
    "bytes",
    "diff"
  ],
  "readme": "# filesize.js\r\n\r\n[![build status](https://secure.travis-ci.org/avoidwork/filesize.js.svg)](http://travis-ci.org/avoidwork/filesize.js)  [![downloads](https://img.shields.io/npm/dt/filesize.svg)](https://www.npmjs.com/package/filesize) [![CDNJS version](https://img.shields.io/cdnjs/v/filesize.svg)](https://cdnjs.com/libraries/filesize)\r\n\r\nfilesize.js provides a simple way to get a human readable file size string from a number (float or integer) or string.\r\n\r\n## Optional settings\r\n\r\n`filesize()` accepts an optional descriptor Object as a second argument, so you can customize the output.\r\n\r\n### base\r\n_*(number)*_ Number base, default is `2`\r\n\r\n### bits\r\n_*(boolean)*_ Enables `bit` sizes, default is `false`\r\n\r\n### exponent\r\n_*(number)*_ Specifies the symbol via exponent, e.g. `2` is `MB` for base 2, default is `-1`\r\n\r\n### fullform\r\n_*(boolean)*_ Enables full form of unit of measure, default is `false`\r\n\r\n### fullforms\r\n_*(array)*_ Array of full form overrides, default is `[]`\r\n\r\n### output\r\n_*(string)*_ Output of function (`array`, `exponent`, `object`, or `string`), default is `string`\r\n\r\n### round\r\n_*(number)*_ Decimal place, default is `2`\r\n\r\n### separator\r\n_*(string)*_ Decimal separator charactor, default is `.`\r\n\r\n### spacer\r\n_*(string)*_ Character between the `result` and `suffix`, default is `\" \"`\r\n\r\n### standard\r\n_*(string)*_ Standard unit of measure, can be `iec` or `jedec`, default is `jedec`; can be overruled by `base`\r\n\r\n### symbols\r\n_*(object)*_ Dictionary of SI/JEDEC symbols to replace for localization, defaults to english if no match is found\r\n\r\n### suffixes (deprecated: use 'symbols')\r\n_*(object)*_ Dictionary of SI/JEDEC symbols to replace for localization, defaults to english if no match is found\r\n\r\n### unix\r\n_*(boolean)*_ Enables unix style human readable output, e.g `ls -lh`, default is `false`\r\n\r\n## Examples\r\n\r\n```javascript\r\nfilesize(500);                        // \"500 B\"\r\nfilesize(500, {bits: true});          // \"4 Kb\"\r\nfilesize(265318, {base: 10});         // \"265.32 kB\"\r\nfilesize(265318);                     // \"259.1 KB\"\r\nfilesize(265318, {round: 0});         // \"259 KB\"\r\nfilesize(265318, {output: \"array\"});  // [259.1, \"KB\"]\r\nfilesize(265318, {output: \"object\"}); // {value: 259.1, suffix: \"KB\", symbol: \"KB\"}\r\nfilesize(1, {symbols: {B: \"Б\"}});     // \"1 Б\"\r\nfilesize(1024);                       // \"1 KB\"\r\nfilesize(1024, {exponent: 0});        // \"1024 B\"\r\nfilesize(1024, {output: \"exponent\"}); // 1\r\nfilesize(265318, {standard: \"iec\"});  // \"259.1 KiB\"\r\nfilesize(265318, {standard: \"iec\", fullform: true}); // \"259.1 kibibytes\"\r\nfilesize(12, {fullform: true, fullforms: [\"байтов\"]});  // \"12 байтов\"\r\nfilesize(265318, {separator: \",\"});   // \"259,1 KB\"\r\n```\r\n\r\n## Partial Application\r\n`filesize.partial()` takes the second parameter of `filesize()` and returns a new function with the configuration applied \r\nupon execution. This can be used to reduce `Object` creation if you call `filesize()` without caching the `descriptor` \r\nin lexical scope.\r\n\r\n```javascript\r\nconst size = filesize.partial({standard: \"iec\"});\r\n\r\nsize(265318); // \"259.1 KiB\"\r\n```\r\n\r\n## How can I load filesize.js?\r\nfilesize.js supports AMD loaders (require.js, curl.js, etc.), node.js & npm (```npm install filesize```), or using a script tag.\r\n\r\n## License\r\nCopyright (c) 2018 Jason Mulligan\r\nLicensed under the BSD-3 license.\r\n",
  "readmeFilename": "README.md",
  "_id": "filesize@3.6.0",
  "_from": "filesize@>=3.1.3 <4.0.0"
}
